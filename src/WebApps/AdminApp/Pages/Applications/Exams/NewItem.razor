@page "/app/exams/new"
@using Examination.Shared.Questions
@using Examination.Shared.Exams
@using Examination.Shared.Categories
@using Examination.Shared.Enum
@using Microsoft.Extensions.Logging
@inject IExamService ExamService
@inject ICategoryService CategoryService
@inject ILogger<NewItem> Logger
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Create a new Exam</MudText>

<EditForm Model="model" OnValidSubmit="OnValidSubmit">
	<MudPaper>
		<MudGrid Style="margin: 0">
			<MudItem xs="6" md="6" sm="12">
				<DataAnnotationsValidator />
				<MudTextField Label="Name" Required="true" RequiredError="Name is required" @bind-Value="model.Name" For="@(() => model.Name)" />
				
				<MudTextField Label="Short Description" Required="true" RequiredError="Short description is required" @bind-Value="model.ShortDesc" For="@(() => model.ShortDesc)" />
				
				<MudTextField Label="Content" Required="true" RequiredError="Content is required" @bind-Value="model.Content" For="@(() => model.Content)" />
				
				<MudNumericField Label="Number of minute" Required="true" RequiredError="Number minutes is required" @bind-Value="model.DurationInMinutes" For="@(() => model.DurationInMinutes)" />

				<MudNumericField Label="Number of question" Required="true" RequiredError="Number question is required" @bind-Value="model.NumberOfQuestions" For="@(() => model.NumberOfQuestions)" />

				<MudNumericField Label="Mimimum correct for pass" Required="true" RequiredError="Number of questions for pass is required" @bind-Value="model.NumberOfQuestionCorrectForPass" For="@(() => model.NumberOfQuestionCorrectForPass)" />
				
				<MudCheckBox Label="Restrict time" @bind-Checked="model.IsTimeRestricted" For="@(() => model.IsTimeRestricted)" />

				<MudCheckBox Label="Auto generate question" @bind-Checked="model.AutoGenerateQuestion" For="@(() => model.AutoGenerateQuestion)" />
				
				<MudText>Level</MudText>
				
				<MudRadioGroup @bind-SelectedOption="model.Level" Required="true" RequiredError="Level is required">
					<MudRadio Option="Level.Easy" Color="Color.Primary">Easy</MudRadio>
					<MudRadio Option="Level.Medium" Color="Color.Warning">Medium</MudRadio>
					<MudRadio Option="Level.Difficult" Color="Color.Error">Difficult</MudRadio>
				</MudRadioGroup>
				
				<MudSelect Label="Category" @bind-Value="model.CategoryId" Required="true" RequiredError="Category is required" OffsetY="true" AdornmentIcon="@Icons.Material.Filled.Category" AdornmentColor="Color.Primary">
					@foreach (var item in categories)
					{
						<MudSelectItem Value="item.Id">@item.Name</MudSelectItem>
					}
				</MudSelect>
			</MudItem>
			<MudItem xs="6" sm="12">
				<MudText>Questions</MudText>
				<MudButton ButtonType="ButtonType.Button" OnClick="AddQuestions" Variant="Variant.Filled" Color="Color.Success">Create</MudButton>
				
				<MudTable Items="questions" Hover="true" Breakpoint="Breakpoint.Sm" Loading="loading" Context="item" LoadingProgressColor="Color.Info">
					<HeaderContent>
						<MudTh>Content</MudTh>
						<MudTh>Level</MudTh>
						<MudTh></MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd DataLabel="Content">@item.Content</MudTd>
						<MudTd DataLabel="Level">@item.Level</MudTd>
						<MudTh>
							<MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async ()=> await OnDelete(item.Id)" Variant="Variant.Filled" Color="Color.Error" Size="Size.Large" Class="ma-2" />
						</MudTh>
					</RowTemplate>
				</MudTable>
			</MudItem>
			<MudItem sm="12">
				<MudToolBar>
					<MudSpacer />
					<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Lưu lại</MudButton>
				</MudToolBar>
			</MudItem>
		</MudGrid>
	</MudPaper>
</EditForm>

<MudOverlay Visible="loading" DarkBackground="true" Absolute="true">
	<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

@code {
	bool loading = false;
	CreateExamRequest model = new CreateExamRequest();

	List<CategoryDto> categories = new List<CategoryDto>();

	HashSet<QuestionDto> questions = new HashSet<QuestionDto>();

	protected override async Task OnInitializedAsync()
	{
		var result = await CategoryService.GetAllCategoriesAsync();
		if (result.IsSuccessed)
		{
			categories = result.ResultObj;
		}
	}

	private async Task AddQuestions()
	{
		var parameters = new DialogParameters
		{
			["SelectedQuestions"] = questions
		};

		var dialog = DialogService.Show<QuestionDialog>("Add answer", parameters, new DialogOptions()
		{
			MaxWidth = MaxWidth.Large
		});

		var result = await dialog.Result;
		if (!result.Cancelled)
		{
			questions = result.Data as HashSet<QuestionDto>;
			model.Questions = questions.ToList();
		}
	}

	private async Task OnValidSubmit()
	{
		loading = true;
		var result = await ExamService.CreateAsync(model);
		if (result.IsSuccessed)
		{
			Snackbar.Add("Create new item success", Severity.Success);
			NavigationManager.NavigateTo(UrlConstants.Exams);
		}
		else
		{
			Snackbar.Add(result.Message, Severity.Error);
		}
		loading = false;
		StateHasChanged();
	}

	private async Task OnDelete(string id)
	{
		var parameters = new DialogParameters();
		parameters.Add("ContentText", "Do you really want to delete these records? This process cannot be undone.");
		parameters.Add("ButtonText", "Delete");
		parameters.Add("Color", Color.Error);

		var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.ExtraSmall};

		var dialog = DialogService.Show<ConfirmationDialog>("Delete", parameters, options);
		var result = await dialog.Result;
		if (!result.Cancelled)
		{
			questions.RemoveWhere(i => i.Id == id);
		}
	}
}
