@page "/app/questions"
@using Examination.Shared.Questions;
@using Examination.Shared.Enum;
@using Examination.Shared.Categories
@using AdminApp.Services
@inject IQuestionService QuestionService
@inject ICategoryService CategoryService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Question</MudText>
<MudGrid>
	<MudItem xs="12" sm="12" md="12">
		<MudCard Elevation="25" Style="height: 100%">
			<MudCardHeader>
				<CardHeaderContent>
					<MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Link="/app/questions/new" Color="Color.Primary">Create</MudButton>
				</CardHeaderContent>
			</MudCardHeader>
			
			<MudCardContent Class="px-0">
				<MudGrid>
					<MudItem xs="12" sm="12" md="12">
						<div class="d-flex" style="align-items: baseline;">
							<MudTextField @bind-Value="@QuestionSearch.Content" Immediate="true" Placeholder="Enter question content..." Clearable="true" Class="mt-0 user-search-text" AdornmentIcon="@Icons.Filled.Search" />
							
							<MudSelect Label="Chooose category" @bind-Value="QuestionSearch.CategoryId" Clearable="true" AdornmentColor="Color.Primary" Style="width: 200px;">
								@foreach (var item in Categories)
								{
									<MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
								}
							</MudSelect>
							<MudButton ButtonType="ButtonType.Button" Color="Color.Success" OnClick="HandleSearch">Search</MudButton>
						</div>
					</MudItem>
					<MudItem xs="12" md="12">
						<MudTable Items="@Elements" FixedHeader="true" FixedFooter="false" Height="400px">
							<HeaderContent>
								<MudTh>Content</MudTh>
								<MudTh>Level</MudTh>
								<MudTh>Type</MudTh>
								<MudTh>Category</MudTh>
								<MudTh>Date Create</MudTh>
								<MudTh></MudTh>
							</HeaderContent>
							<RowTemplate>
								<MudTd DataLabel="name">@context.Content</MudTd>
								<MudTd DataLabel="name">@context.Level</MudTd>
								<MudTd DataLabel="name">@(context.QuestionType == QuestionType.SingleSelection ? "Single" : "Multiples")</MudTd>
								<MudTd DataLabel="name">@context.CategoryName</MudTd>
								<MudTd DataLabel="name">@context.DateCreated.ToString("dd/MM/yyyy hh:mm")</MudTd>
								<MudTd>
									<MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => NavigateToEdit(context.Id)" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" Class="ma-2"/>
									<MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await OnDeleteTask(context.Id)" Variant="Variant.Filled" Color="Color.Error" Size="Size.Large" Class="ma-2"/>

								</MudTd>
							</RowTemplate>

							<PagerContent>
								<Pagination MetaData="MetaData" Spread="5" SelectedPage="SeletedPage"></Pagination>
							</PagerContent>
						</MudTable>
					</MudItem>
				</MudGrid>
			</MudCardContent>
		</MudCard>
	</MudItem>
</MudGrid>

<MudOverlay Visible="loading" DarkBackground="true" Absolute="true">
	<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

@code {
	[CascadingParameter] MudDialogInstance MudDialog { get; set; }
	[CascadingParameter]
	private Error Error { get; set; }

	public bool loading = false;

	private string DeleteId { set; get; }

	private List<QuestionDto> Elements = new List<QuestionDto>();

	public MetaData MetaData { get; set; } = new MetaData();

	private QuestionSearch QuestionSearch = new QuestionSearch();

	private List<CategoryDto> Categories = new List<CategoryDto>();

	protected override async Task OnInitializedAsync()
	{
		await GetQuestions();
		await FillCategories();
	}

	public async Task SearchData(QuestionSearch questionSearch)
	{
		QuestionSearch = questionSearch;
		await GetQuestions();
	}

	public async Task OnDeleteTask(string deleteId)
	{
		DeleteId = deleteId;
		var parameters = new DialogParameters();
		parameters.Add("ContentText", "Do you really want to delete these records? This process cannot be undone.");
		parameters.Add("ButtonText", "Delete");
		parameters.Add("Color", Color.Error);

		var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.ExtraSmall};

		var dialog = DialogService.Show<ConfirmationDialog>("Delete", parameters, options);

		var result = await dialog.Result;

		if (!result.Cancelled)
		{
			await QuestionService.DeleteAsync(DeleteId);
			await GetQuestions();
		}
	}

	async Task GetQuestions()
	{
		loading = true;
		try
		{
			var pagingResponse = await QuestionService.GetQuestionsPagingAsync(QuestionSearch);
			Elements = pagingResponse.ResultObj.Items;
			MetaData = pagingResponse.ResultObj.MetaData;
			loading = false;
		}
		catch (Exception ex)
		{
			Error.ProcessError(ex);
			loading = false;
		}
	}

	private async Task FillCategories()
	{
		var categoryResult = await CategoryService.GetAllCategoriesAsync();
		if (categoryResult.IsSuccessed)
		{
			Categories = categoryResult.ResultObj;
		}
	}

	private async Task SeletedPage(int page)
	{
		QuestionSearch.PageNumber = page;
		await GetQuestions();
	}

	private void NavigateToEdit(string id)
	{
		NavigationManager.NavigateTo($"/app/questions/details/{id}");
	}

	private async Task HandleSearch()
	{
		await GetQuestions();
	}
}
